1.
Chrome 웹 스토어에서 확장 프로그램에 `React Developer Tools`를 검색 후 설치.
링크 : https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=ko
해당 확장 프로그램을 설치했을 경우, 개발자 도구 Tab에서 React 탭이 새로 생긴 것을 확인 가능.

2.
일반 개발자 도구창에서 Elements를 볼 경우:
-> 컴포넌트를 해석한 상태로 태그를 보여줌

React 확장 프로그램에 따른 Components 탭에서 Elements를 볼 경우:
-> 실제 사용자가 만든 컴포넌트 이름으로 태그를 보여줌
-> Hooks로 선언했던 State의 값을 보여줌

3.
Redux DevTools 또한 웹 스토어의 확장 프로그램에서 설치 가능.
링크 : https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=ko

4.
chrome://extensions/ 들어가서 파일 URL 접근허용.
REACT로 만든 web에서만 작동.

5.
state의 변경에 따라 모든 컴포넌트가 다시 렌더링되는 것은 문제가 있음.
확인 방법 : F12(개발자 도구) > Components > 톱니바퀴 모양 클릭 > General
"Highlight updates when components render."를 선택.

이 문제를 해결하기 위해서는 `shouldComponentUpdate(nextProps, nextState, nextContext)` 메서드가 필요.
-> nextState는 미래에 바뀌게 될 상태를 의미함.
ex)
shouldComponentUpdate(nextProps, nextState, nextContext) {
    if (this.state.counter !== nextState.counter) {
        return true;
    }
    return false;
}

6.
shouldComponentUpdate가 너무 복잡하다면 다음의 방법을 쓸 수 있음.
`const {Component} = require('react');` 를,
`const {PureComponent} = require('react'); `로 바꾸는 방법을 사용할 수 있음.
-> PureComponent는 shouldComponentUpdate를 자동으로 구현한 클래스임.

7.
단, PureComponent의 단점은 배열이나 객체 등 참조관계가 존재하는 구조가 생겼을 경우,
PureComponent가 제대로 판단하지 못할 가능성이 큼.
그래서 array.push()를 사용하지 않고, [...prevArr, {...}]와 같이 작성했던 것임.
즉, 참조 주소값 자체가 바뀐 것이 아니면, 알아차리지 못함.

8.
React Class Version이 아닌
React Hooks에서는 shouldComponentUpdate, PureComponent 사용 불가.
따라서, React.memo를 사용해야 함.
ex)
const {memo} from 'react';
const Tries = memo(
    //...나머지는 이전 코드 그대로 사용...
);

9.
TIPS!
render 함수 안에는 절대 setState를 쓰면 안됨.
이유: setState를 할 때마다 render를 호출하는데, 무한 호출 현상 발생 가능.

10.
