/*
97.
스코프(scope)
모든 식별자는 자신이 선언된 위치에 의해,
다른 코드가 식별자 자신을 참조할 수 있는 유효범위가 결정됨.

98.
'''
var x = 'global';

function foo() {
	var x = 'local';
	console.log(x);
}

foo();	// local
console.log(x);	// global
'''
위와 같은 결과가 발생하는 이유는,
전역변수인 x와 지역변수인 x가 다른 스코프에서 선언된 별개의 변수이기 때문.
자바스크립트 엔진은 스코프를 통해 어떤 변수를 참조해야 할지 결정.

99.
스코프는 식별자를 검색할 때 사용하는 규칙.

100.
렉시컬 환경(Lexical Environment)
"코드가 어디서 실행되며, 주변에 어떤 코드가 있는가"

101.
var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용되며,
이는 의도치 않게 변수값이 재할당되어 변경되는 부작용을 발생시킴.
반면, let이나 const 키워드로 선언된 변수는
같은 스코프 내에서 중복 선언을 허용하지 않음.
'''
function foo() {
	var x = 1;
	var x = 2;
	console.log(x);	// 2
	// 중복된 이름으로 선언될 경우,
	// 나중에 선언된 변수가 이전에 선언된 변수를 덮어씀.
}
foo();

function bar() {
	let x = 1;
	// let x = 2;
	// SyntaxError : Identifier 중복 선언 오류.
}
bar();
'''

102.
스코프 체인(scope chain)
모든 스코프는 하나의 계층적 구조로 연결되며,
모든 지역 스코프의 최상위 스코프는 전역 스코프임.
변수를 참조할 때, 자바스크립트 엔진은 스코프 체인을 통해
변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며,
선언된 변수를 검색.

103.
자바스크립트 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 시작해서
상위 스코프 방향으로 이동하며 선언된 변수(함수도 마찬가지)를 검색.
'''
function foo() {
	console.log('global function foo.');
}

function bar() {
	function foo() {
		console.log('local function foo.');
	}
	foo();
}
bar();
'''

104.
함수 레벨 스코프
var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정함.

105.
블록 레벨 스코프
모든 코드 블록을 지역 스코프로 처리함.
let, const 키워드는 var과 달리 블록 레벡 스코프를 지원함.

106.
렉시컬 스코프(정적 스코프)
함수 정의가 평가되는 시점에서 상위 스코프가 정적으로 결정됨.
함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정됨을 의미.

'''
var x=1;

function foo() {
	var x=10;
	bar();
}

function bar() {
	console.log(x);
}

foo();	// 1
bar();	// 1
'''
""함수를 어디서 정의했는지에 따라 함수의 상위 스코프가 결정됨.""
*/