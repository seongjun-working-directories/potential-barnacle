/*
115.
(1) let, const는 var과 달리, 변수의 중복 선언을 허용하지 않음.
(2) var는 함수 레벨 스코프를 지원하지만, let, const는 블록 레벨 스코프를 지원함.
(3) let, const는 var과 달리, 변수 호이스팅이 발생하지 않는 것처럼 동작.
-> let 키워드로 선언된 변수는 "선언"과 "초기화"가 분리되어 진행됨.
-> 즉, 런타임 이전에 암묵적으로 선언 단계가 먼저 실행되지만,
-> 초기화 단계는 변수 선언문에 도달했을 때 실행.
'''
console.log(foo);	// ReferenceError : foo is not defined
let foo;
'''

116.
일시적 사각지대(Temporal Dead Zone, TDZ)
스코프의 시작 지점부터 초기화 시작 지점까지 변수를 참조할 수 없는 구간.
-> let으로 선언된 변수는 스코프 시작 지점부터 초기화 단계 시작 지점까지 변수 참조 불가.
'''
// 선언 단계
// 런타임 이전에 선언 단계 실행. 그러나, 아직 변수가 초기화되지 않음.
// console.log(foo);	// ReferenceError : foo is not defined

// 일시적 사각지대(TDZ)

// 초기화 단계
let foo;	
console.log(foo);	// undefined

// 할당 단계
foo = 1;
console.log(foo);	// 1
'''

117.
let을 사용해 선언된 전역 변수는 전역 객체의 프로퍼티가 아님.
즉, 브라우저 환경에서 window.foo 등과 같이 접근할 수 없음.

118.
const 키워드는 상수를 선언하기 위해 사용.
그러나 반드시 상수만을 위해 사용하는 것은 아님.
const는 일반적으로 let과 유사한 특징을 지님.

119.
const 키워드로 선언된 변수는 반드시 선언과 동시에 초기화해야 함.
또한, const 키워드로 선언된 변수는 재할당이 금지됨.

120.
일반적으로 상수 이름은 대문자로 선언해 상수임을 명확히 나타냄.

121.
const 키워드로 선언된 변수에 원시 값을 할당한 경우 값을 변경할 수 없지만,
const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있음.
즉, const로 연결된 주소값은 변경이 불가능하지만, 해당 객체 내의 프로퍼티 등은 수정 가능.
'''
const person = {
	name : 'Lee'
};

person.name = 'Kim';
console.log(person);	// {name:'Kim'}
'''

122.
정리하자면, 변수 선언 시에는 기본적으로 const를 사용하고,
재할당이 필요한 경우에 한정해 let을 사용해야 함.

123.
변수 선언 시점에서 재할당이 필요한지 모르겠다면,
일단 const를 사용하고, 나중에 필요에 따라 let으로 변경할 것.
*/