0.
npm install typescript -g
tsc --init  // tsconfig.json 파일 생성
tsc         // ts 파일을 컴파일

기본 TSConfig 세팅
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "strict": true,
    "outDir": "dist",
    "sourceMap": true
  }
}


1. TSConfig Reference : https://www.typescriptlang.org/tsconfig
noImplicitAny(any로 추론되는 경우, 에러를 발생시킴)
-- In some cases where no type annotations are present,
-- TypeScript will fall back to a type of any for a variable when it cannot infer the type.

strictNullChecks(모든 타입에 자동으로 포함되어 있는 null과 undefined를 제거)
-- When strictNullChecks is false, null and undefined are effectively ignored by the language.
-- This can lead to unexpected errors at runtime.
-- When strictNullChecks is true, null and undefined have their own distinct types
-- and you’ll get a type error if you try to use them where a concrete value is expected.

noImplicitReturns(함수 내 모든 코드가 값을 리턴하지 않으면, 컴파일 에러를 발생시킴)
-- When enabled, TypeScript will check all code paths in a function to ensure they return a value.
-- 가급적이면 명시적으로 리턴 타입을 지정할 것.

strictFunctionTypes(함수의 매개변수 타입만 같거나 슈퍼타입인 경우가 아닌 경우, 에러를 통해 경고)
-- When enabled, this flag causes functions parameters to be checked more correctly.

strictPropertyInitialization(Class의 프로퍼티가 생성자 혹은 선언에서 값이 지정되지 않으면, 에러를 통해 경고)
-- When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.


2. 매개변수에 object가 들어오는 경우, Object Literal Type 지정
function f(a: {name: string; age: number}): string {
    return `${a.name} // ${a.age}`;
}
그런데 보통은 interface나 type 연산자를 사용해 Object를 제한함
ex)
interface PersonInterface {
  name: string;
  age: number;
}

type PersonTypeAlias = {
  name: string;
  age: number;
};


3. structural type system vs nominal type system
(1) structural type system - 구조가 같으면, 같은 타입
'''
interface IPerson {
  name: string;
  age: number;
  speak(): string;
}

type PersonType = {
  name: string;
  age: number;
  speak(): string;
};

let personInterface: IPerson = {} as any;
let personType: PersonType = {} as any;

personInterface = personType;
personType = personInterface;
'''

(2) nominal type system - 구조가 같아도 이름이 다르면, 다른 타입
'''
type PersonID = string & { readonly brand: unique symbol };

function PersonID(id: string): PersonID {
  return id as PersonID;
}

function getPersonById(id: PersonID) {}

getPersonById(PersonID('id-aaaaaa'));   // (O)
getPersonById('id-aaaaaa'); // (X)
// error TS2345: Argument of type 'string' is not assignable to parameter of type 'PersonID'.
// Type 'string' is not assignable to type '{ readonly brand: unique symbol; }'.
'''


4. Type Alias vs Interface
(1)
// type alias method
type EatType = (food: string) => void;

// interface method
interface IEat {
  (food: string): void;
}

(2)
// type alias array
type PersonList = string[];

// interface array
interface IPersonList {
  [index: number]: string;
}


5. Intersection(&), Union(|)


6. Inteface에서는 되고, Type Alias에서는 안되는 Declaration Merging
interface MergeInterface {
    a: string;
}
interface MergeInterface {
    b: string;
}
let mergedInterface: MergeInterface;
mergedInterface;    // a와 b를 모두 속성으로 가지게 됨


7. 서브 타입, 슈퍼 타입(1)
'''
// sub1 타입은 sup1 타입의 서브 타입이다.
// sup1 타입은 sub1 타입의 슈퍼 타입이다.
let sub1: 1 = 1;
let sup1: number = sub1;
sub1 = sup1; // error! Type 'number' is not assignable to type '1'.

// sub2 타입은 sup2 타입의 서브 타입이다.
// sup2 타입은 sub2 타입의 슈퍼 타입이다.
let sub2: number[] = [1];
let sup2: object = sub2;
sub2 = sup2; // error! Type '{}' is missing the following properties from type 'number[]': length, pop, push, concat, and 16 more.

// sub3 타입은 sup3 타입의 서브 타입이다.
// sup3 타입은 sub3 타입의 슈퍼 타입이다.
let sub3: [number, number] = [1, 2];    // 튜플 타입
let sup3: number[] = sub3;
sub3 = sup3; // error! Type 'number[]' is not assignable to type '[number, number]'. Target requires 2 element(s) but source may have fewer.
'''


8. 서브 타입, 슈퍼 타입(2)
'''
// sub4 타입은 sup4 타입의 서브 타입이다.
// sup4 타입은 sub4 타입의 슈퍼 타입이다.
let sub4: number = 1;
let sup4: any = sub4;
sub4 = sup4;

// sub5 타입은 sup5 타입의 서브 타입이다.
// sup5 타입은 sub5 타입의 슈퍼 타입이다.
let sub5: never = 0 as never;
let sup5: number = sub5;
sub5 = sup5; // error! Type 'number' is not assignable to type 'never'.

class SubAnimal {}
class SubDog extends SubAnimal {
  eat() {}
}

// sub6 타입은 sup6 타입의 서브 타입이다.
// sup6 타입은 sub6 타입의 슈퍼 타입이다.
let sub6: SubDog = new SubDog();
let sup6: SubAnimal = sub6;
sub6 = sup6; // error! Property 'eat' is missing in type 'SubAnimal' but required in type 'SubDog'.
'''


9. 서브 타입, 슈퍼 타입(3)
-- 같거나 서브 타입인 경우, 할당이 가능
'''
// primitive type
let sub7: string = '';
let sup7: string | number = sub7;

// object - 각각의 프로퍼티가 대응하는 프로퍼티와 같거나 서브타입이어야 한다.
let sub8: { a: string; b: number } = { a: '', b: 1 };
let sup8: { a: string | number; b: number } = sub8;

// array - object 와 마찬가지
let sub9: Array<{ a: string; b: number }> = [{ a: '', b: 1 }];
let sup9: Array<{ a: string | number; b: number }> = sub8;
'''

-- 함수의 매개변수 타입만 같거나 슈퍼타입인 경우, 할당이 가능
'''
class Person {}
class Developer extends Person {
  coding() {}
}
class StartupDeveloper extends Developer {
  burning() {}
}

function tellme(f: (d: Developer) => Developer) {}

// Developer => Developer 에다가 Developer => Developer 를 할당하는 경우
tellme(function dToD(d: Developer): Developer {
  return new Developer();
});

// Developer => Developer 에다가 Person => Developer 를 할당하는 경우
tellme(function pToD(d: Person): Developer {
  // --> Person이 Developer의 슈퍼셋이므로 오류가 발생하지 않음
  return new Developer();
});

// Developer => Developer 에다가 StartipDeveloper => Developer 를 할당하는 경우
tellme(function sToD(d: StartupDeveloper): Developer {
  // --> Developer가 StartupDeveloper의 슈퍼셋이므로 오류가 발생함
  return new Developer();
});
'''


10. any 대신 unknown
'''
// 입력은 마음대로,
// 함수 구현은 문제 없도록
function funknown(a: unknown): number | string | void {
  a.toString(); // error! Object is of type 'unknown'.  // any인 경우 에러가 안남

  if (typeof a === 'number') {
    return a * 38;
  } else if (typeof a === 'string') {
    return `Hello ${a}`;
  }
}

console.log(funknown(10)); // 380
console.log(funknown('Mark')); // Hello Mark
console.log(funknown(true)); // undefined
'''